{"version":3,"sources":["types/SortType.ts","components/TodoList/TodoList.tsx","components/TodoFilter/TodoFilter.tsx","components/Loader/Loader.tsx","api.ts","components/TodoModal/TodoModal.tsx","App.tsx","index.tsx"],"names":["SortType","TodoList","React","memo","props","todos","selectedTodoId","onSelectedTodo","className","map","todo","classNames","id","completed","title","type","onClick","TodoFilter","sortType","onSelectSortType","query","onChangeQuery","value","onChange","event","target","all","active","placeholder","length","style","pointerEvents","Loader","get","url","delay","fullURL","Promise","resolve","setTimeout","then","fetch","res","json","TodoModal","onCLose","selectedTodo","useState","user","setUser","useEffect","fetchUser","a","userId","href","email","name","App","setTodos","setSortType","setQuery","setSelectedTodoId","loadedTodos","visibleTodos","useMemo","filter","toLowerCase","includes","find","ReactDOM","render","document","getElementById"],"mappings":"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","file":"static/js/main.3938f574.chunk.js","sourcesContent":["export enum SortType {\n  all = 'all',\n  active = 'active',\n  completed = 'completed',\n}\n","import classNames from 'classnames';\nimport React from 'react';\nimport { Todo } from '../../types/Todo';\n\ntype Props = {\n  todos: Todo[],\n  selectedTodoId: number | null,\n  onSelectedTodo: (todoId: number) => void,\n};\n\nexport const TodoList: React.FC<Props> = React.memo(\n  (props) => {\n    const { todos, selectedTodoId, onSelectedTodo } = props;\n\n    return (\n      <table className=\"table is-narrow is-fullwidth\">\n        <thead>\n          <tr>\n            <th>#</th>\n            <th>\n              <span className=\"icon\">\n                <i className=\"fas fa-check\" />\n              </span>\n            </th>\n            <th>Title</th>\n            <th> </th>\n          </tr>\n        </thead>\n\n        <tbody>\n          {todos.map(todo => (\n            <tr\n              key={todo.id}\n              data-cy=\"todo\"\n              className={classNames({\n                'has-background-info-light': selectedTodoId === todo.id,\n              })}\n            >\n              <td className=\"is-vcentered\">{todo.id}</td>\n              <td className=\"is-vcentered\">\n                {todo.completed && (\n                  <span className=\"icon\" data-cy=\"iconCompleted\">\n                    <i className=\"fas fa-check\" />\n                  </span>\n                )}\n              </td>\n              <td className=\"is-vcentered is-expanded\">\n                <p className={todo.completed\n                  ? 'has-text-success'\n                  : 'has-text-danger'}\n                >\n                  {todo.title}\n                </p>\n\n              </td>\n              <td className=\"has-text-right is-vcentered\">\n                <button\n                  data-cy=\"selectButton\"\n                  className=\"button\"\n                  type=\"button\"\n                  onClick={() => onSelectedTodo(todo.id)}\n                >\n                  <span className=\"icon\">\n                    <i className={todo.id === selectedTodoId\n                      ? 'far fa-eye-slash'\n                      : 'far fa-eye'}\n                    />\n                  </span>\n                </button>\n              </td>\n            </tr>\n          ))}\n        </tbody>\n      </table>\n    );\n  },\n);\n","import React from 'react';\nimport { SortType } from '../../types/SortType';\n\ntype Props = {\n  sortType: SortType,\n  onSelectSortType: (sortType: SortType) => void;\n  query: string;\n  onChangeQuery: (query: string) => void;\n};\n\nexport const TodoFilter: React.FC<Props> = React.memo(\n  (props) => {\n    const {\n      sortType,\n      onSelectSortType,\n      query,\n      onChangeQuery,\n    } = props;\n\n    return (\n      <form className=\"field has-addons\">\n        <p className=\"control\">\n          <span className=\"select\">\n            <select\n              data-cy=\"statusSelect\"\n              value={sortType}\n              onChange={\n                event => onSelectSortType(event.target.value as SortType)\n              }\n            >\n              <option value={SortType.all}>All</option>\n              <option value={SortType.active}>Active</option>\n              <option value={SortType.completed}>Completed</option>\n            </select>\n          </span>\n        </p>\n\n        <p className=\"control is-expanded has-icons-left has-icons-right\">\n          <input\n            data-cy=\"searchInput\"\n            type=\"text\"\n            className=\"input\"\n            placeholder=\"Search...\"\n            value={query}\n            onChange={event => onChangeQuery(event.target.value)}\n          />\n          <span className=\"icon is-left\">\n            <i className=\"fas fa-magnifying-glass\" />\n          </span>\n\n          {!query.length || (\n            <span className=\"icon is-right\" style={{ pointerEvents: 'all' }}>\n              {/* eslint-disable-next-line jsx-a11y/control-has-associated-label */}\n              <button\n                data-cy=\"clearSearchButton\"\n                type=\"button\"\n                className=\"delete\"\n                onClick={() => onChangeQuery('')}\n              />\n            </span>\n          )}\n        </p>\n      </form>\n    );\n  },\n);\n","import React from 'react';\nimport './Loader.scss';\n\nexport const Loader: React.FC = () => (\n  <div className=\"Loader\" data-cy=\"loader\">\n    <div className=\"Loader__content\" />\n  </div>\n);\n","import { Todo } from './types/Todo';\nimport { User } from './types/User';\n\n// eslint-disable-next-line max-len\nconst BASE_URL = 'https://mate-academy.github.io/react_dynamic-list-of-todos/api';\n\nfunction wait(delay: number): Promise<void> {\n  return new Promise(resolve => {\n    setTimeout(resolve, delay);\n  });\n}\n\nfunction get<T>(url: string): Promise<T> {\n  // eslint-disable-next-line prefer-template\n  const fullURL = BASE_URL + url + '.json';\n\n  return wait(300)\n    .then(() => fetch(fullURL))\n    .then(res => res.json());\n}\n\nexport const getTodos = () => get<Todo[]>('/todos');\n\nexport const getUser = (userId: number) => get<User>(`/users/${userId}`);\n","import React, { useEffect, useState } from 'react';\nimport { Loader } from '../Loader';\nimport { Todo } from '../../types/Todo';\nimport { User } from '../../types/User';\nimport { getUser } from '../../api';\n\ntype Props = {\n  onCLose: (todoId: number | null) => void;\n  selectedTodo: Todo,\n};\n\nexport const TodoModal: React.FC<Props> = React.memo(\n  (props) => {\n    const { onCLose, selectedTodo } = props;\n\n    const [user, setUser] = useState<User | null>(null);\n\n    useEffect(() => {\n      const fetchUser = async () => {\n        setUser(await getUser(selectedTodo.userId));\n      };\n\n      fetchUser();\n    }, []);\n\n    return (\n      <div className=\"modal is-active\" data-cy=\"modal\">\n        <div className=\"modal-background\" />\n\n        {!user ? (\n          <Loader />\n        ) : (\n          <div className=\"modal-card\">\n            <header className=\"modal-card-head\">\n              <div\n                className=\"modal-card-title has-text-weight-medium\"\n                data-cy=\"modal-header\"\n              >\n                {`Todo #${selectedTodo.id}`}\n              </div>\n\n              {/* eslint-disable-next-line jsx-a11y/control-has-associated-label */}\n              <button\n                type=\"button\"\n                className=\"delete\"\n                data-cy=\"modal-close\"\n                onClick={() => onCLose(null)}\n              />\n            </header>\n\n            <div className=\"modal-card-body\">\n              <p className=\"block\" data-cy=\"modal-title\">\n                {selectedTodo.title}\n              </p>\n\n              <p className=\"block\" data-cy=\"modal-user\">\n                <strong\n                  className={\n                    selectedTodo.completed\n                      ? 'has-text-success'\n                      : 'has-text-danger'\n                  }\n                >\n                  {\n                    selectedTodo.completed\n                      ? 'Done'\n                      : 'Planned'\n                  }\n                </strong>\n\n                {' by '}\n\n                <a href={`mailto:${user.email}`}>\n                  {user.name}\n                </a>\n              </p>\n            </div>\n          </div>\n        )}\n      </div>\n    );\n  },\n);\n","/* eslint-disable max-len */\nimport React, { useEffect, useMemo, useState } from 'react';\nimport 'bulma/css/bulma.css';\nimport '@fortawesome/fontawesome-free/css/all.css';\n\nimport { TodoList } from './components/TodoList';\nimport { TodoFilter } from './components/TodoFilter';\nimport { TodoModal } from './components/TodoModal';\nimport { Loader } from './components/Loader';\nimport { getTodos } from './api';\nimport { Todo } from './types/Todo';\nimport { SortType } from './types/SortType';\n\nexport const App: React.FC = () => {\n  const [todos, setTodos] = useState<Todo[]>([]);\n  const [sortType, setSortType] = useState(SortType.all);\n  const [query, setQuery] = useState('');\n  const [selectedTodoId, setSelectedTodoId] = useState<number | null>(null);\n\n  useEffect(() => {\n    getTodos().then(loadedTodos => {\n      setTodos(loadedTodos);\n    });\n  }, []);\n\n  const visibleTodos = useMemo(() => {\n    return todos\n      .filter(todo => {\n        switch (sortType) {\n          case 'all':\n            return true;\n          case 'active':\n            return !todo.completed;\n          case 'completed':\n            return todo.completed;\n          default:\n            return true;\n        }\n      })\n      .filter(todo => todo.title.toLowerCase().includes(query.toLowerCase()));\n  }, [todos, sortType, query]);\n\n  const selectedTodo = useMemo(() => {\n    return visibleTodos.find(todo => todo.id === selectedTodoId) || null;\n  }, [todos, selectedTodoId]);\n\n  return (\n    <>\n      <div className=\"section\">\n        <div className=\"container\">\n          <div className=\"box\">\n            <h1 className=\"title\">Todos:</h1>\n\n            <div className=\"block\">\n              <TodoFilter\n                sortType={sortType}\n                onSelectSortType={setSortType}\n                query={query}\n                onChangeQuery={setQuery}\n              />\n            </div>\n\n            <div className=\"block\">\n              {!todos.length\n                ? <Loader />\n                : (\n                  <TodoList\n                    todos={visibleTodos}\n                    selectedTodoId={selectedTodoId}\n                    onSelectedTodo={setSelectedTodoId}\n                  />\n                )}\n            </div>\n          </div>\n        </div>\n      </div>\n\n      {selectedTodo && (\n        <TodoModal\n          onCLose={setSelectedTodoId}\n          selectedTodo={selectedTodo}\n        />\n      )}\n    </>\n  );\n};\n","import ReactDOM from 'react-dom';\nimport { App } from './App';\n\nReactDOM.render(\n  <App />,\n  document.getElementById('root'),\n);\n"],"sourceRoot":""}